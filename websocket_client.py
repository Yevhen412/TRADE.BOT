import asyncio
import aiohttp
import json
import time
from trade_simulator import TradeSimulator
from telegram_notifier import send_telegram_message

simulator = TradeSimulator()
last_msg_time = time.time()
INACTIVITY_TIMEOUT = 600  # 10 –º–∏–Ω—É—Ç

async def run_session():
    url = "wss://stream.bybit.com/v5/public/spot"
    pairs = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "AVAXUSDT", "XRPUSDT", "ADAUSDT"]
    topics = [f"publicTrade.{pair}" for pair in pairs]

    async with aiohttp.ClientSession() as session:
        async with session.ws_connect(url) as ws:
            print("üåê WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
            await ws.send_json({"op": "subscribe", "args": topics})
            asyncio.create_task(watchdog(ws))

            end_time = time.time() + 120  # 2 –º–∏–Ω—É—Ç—ã
            async for msg in ws:
                if time.time() > end_time:
                    await send_telegram_message("‚èπÔ∏è 2 –º–∏–Ω—É—Ç—ã –ø—Ä–æ—à–ª–∏. –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                    await ws.close()
                    break

                if msg.type == aiohttp.WSMsgType.TEXT:
                    global last_msg_time
                    last_msg_time = time.time()
                    try:
                        event = json.loads(msg.data)
                        signal = simulator.process(event)
                        if signal:
                            message = simulator.simulate_trade(signal)
                            if message:
                                await send_telegram_message(message)
                    except Exception as e:
                        print("‚ùå –û—à–∏–±–∫–∞:", e)

async def watchdog(ws):
    while True:
        await asyncio.sleep(10)
        if time.time() - last_msg_time > INACTIVITY_TIMEOUT:
            await send_telegram_message("‚ö†Ô∏è WebSocket –∑–∞–≤–∏—Å. –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            await ws.close()
            break
