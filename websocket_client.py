import asyncio
import aiohttp
import json
import time
from trade_simulator import TradeSimulator
from telegram_notifier import notify_telegram

simulator = TradeSimulator()
last_msg_time = time.time()
INACTIVITY_TIMEOUT = 600  # 10 –º–∏–Ω—É—Ç

async def connect_websocket():
    print("üöÄ connect_websocket() –≤—ã–∑–≤–∞–Ω–∞")  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤
    global last_msg_time
    url = "wss://stream.bybit.com/v5/public/spot"
    pairs = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "AVAXUSDT", "XRPUSDT", "ADAUSDT"]
    topics = [f"publicTrade.{pair}" for pair in pairs]

    async with aiohttp.ClientSession() as session:
        async with session.ws_connect(url) as ws:
            print("üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket")

            await ws.send_json({
                "op": "subscribe",
                "args": topics
            })

            # –°—Ç–∞—Ä—Ç—É–µ–º watchdog
            asyncio.create_task(watchdog(ws))

            async for msg in ws:
                if msg.type == aiohttp.WSMsgType.TEXT:
                    last_msg_time = time.time()
                    try:
                        event = json.loads(msg.data)
                        signal = simulator.process(event)
                        if signal:
                            message = simulator.simulate_trade(signal)
                            if message:
                                await notify_telegram(message)
                    except Exception as e:
                        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)
                elif msg.type == aiohttp.WSMsgType.ERROR:
                    print("‚ùå –û—à–∏–±–∫–∞ WebSocket:", msg)
                    break

async def watchdog(ws):
    while True:
        await asyncio.sleep(10)
        if time.time() - last_msg_time > INACTIVITY_TIMEOUT:
            print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
            await notify_telegram("‚ö†Ô∏è WebSocket –∑–∞–≤–∏—Å ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            await ws.close()
            return

# ‚¨áÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –¥–ª—è server.py
connect = connect_websocket
