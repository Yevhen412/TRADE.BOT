import os
import requests
import time
import hmac
import hashlib

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")
BASE_URL = "https://api.bybit.com"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ –Ω–µ testnet

def get_timestamp():
    return str(int(time.time() * 1000))

def sign(params: dict) -> str:
    ordered_params = "&".join([f"{k}={v}" for k, v in sorted(params.items())])
    return hmac.new(
        bytes(API_SECRET, "utf-8"),
        bytes(ordered_params, "utf-8"),
        hashlib.sha256,
    ).hexdigest()

def get_spot_balance():
    endpoint = "/v5/account/wallet-balance"
    url = BASE_URL + endpoint
    timestamp = get_timestamp()

    params = {
        "accountType": "SPOT",
        "timestamp": timestamp,
    }

    signature = sign(params)

    headers = {
        "X-BYBIT-API-KEY": API_KEY,
        "X-BYBIT-SIGN": signature,
        "X-BYBIT-TIMESTAMP": timestamp,
    }

    response = requests.get(url, headers=headers, params=params)
    data = response.json()
    return data

def get_futures_balance():
    endpoint = "/v5/account/wallet-balance"
    url = BASE_URL + endpoint
    timestamp = get_timestamp()

    params = {
        "accountType": "UNIFIED",  # –¥–ª—è USDT-—Ñ—å—é—á–µ—Ä—Å–æ–≤ (–µ—Å–ª–∏ Unified Account)
        "timestamp": timestamp,
    }

    signature = sign(params)

    headers = {
        "X-BYBIT-API-KEY": API_KEY,
        "X-BYBIT-SIGN": signature,
        "X-BYBIT-TIMESTAMP": timestamp,
    }

    response = requests.get(url, headers=headers, params=params)
    data = response.json()
    return data

# –ó–∞–ø—É—Å–∫–∞–µ–º
if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ SPOT:")
    spot = get_spot_balance()
    print(spot)

    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ FUTURES (Unified):")
    fut = get_futures_balance()
    print(fut)
