import os
import time
import hashlib
import hmac
import requests
from dotenv import load_dotenv

load_dotenv()

# ‚öôÔ∏è –ö–ª—é—á–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_KEY = os.getenv("BYBIT_API_KEY")
API_SECRET = os.getenv("BYBIT_API_SECRET")

# üîÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "https://api.bybit.com"
ENDPOINT = "/v5/account/wallet-balance"
RECV_WINDOW = "5000"
ACCOUNT_TYPE = "UNIFIED"  # –ò–ª–∏ SPOT, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø–æ—Ç

def get_timestamp():
    return str(int(time.time() * 1000))

def generate_signature(params: dict, secret: str) -> str:
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–ª—é—á—É
    sorted_params = "&".join(f"{k}={v}" for k, v in sorted(params.items()))
    return hmac.new(
        secret.encode("utf-8"),
        sorted_params.encode("utf-8"),
        hashlib.sha256
    ).hexdigest()

def get_balance():
    timestamp = get_timestamp()

    # üîí –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    params = {
        "accountType": ACCOUNT_TYPE,
        "timestamp": timestamp,
        "recvWindow": RECV_WINDOW
    }

    signature = generate_signature(params, API_SECRET)

    headers = {
        "X-BYBIT-API-KEY": API_KEY,
        "X-BYBIT-SIGN": signature,
        "X-BYBIT-TIMESTAMP": timestamp,
        "X-BYBIT-RECV-WINDOW": RECV_WINDOW
    }

    response = requests.get(BASE_URL + ENDPOINT, params=params, headers=headers)

    print("üì¶ Status Code:", response.status_code)
    try:
        print("üì¨ Response:", response.json())
    except Exception as e:
        print("‚ùå Error parsing response:", e)
        print("üîç Raw text:", response.text)

if __name__ == "__main__":
    print("üîç Checking real Bybit balance...")
    get_balance()
