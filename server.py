import aiohttp
from aiohttp import web
import asyncio
import os
from dotenv import load_dotenv
load_dotenv()
import json

from websocket_client import run_session
from telegram_notifier import send_telegram_message

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")

routes = web.RouteTableDef()

@routes.post(f"/{os.getenv('WEBHOOK_SECRET')}")
async def handle(request):
    try:
        print("‚ö†Ô∏è Webhook –ø–æ–ª—É—á–µ–Ω!")
        data = await request.json()
        print("ü•ö –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:", data)

        message = data.get("message", {})
        text = message.get("text", "")
        chat_id = message.get("chat", {}).get("id")

        if text == "/start":
            await send_telegram_message("‚ñ∂Ô∏è –°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞", chat_id)
            await run_session()
        
        return web.Response(text="Webhook handled")  # <= —ç—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç POST-—Ö–µ–Ω–¥–ª–µ—Ä

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        return web.Response(status=500, text="Internal Server Error")

# üîß –î–æ–±–∞–≤–ª—è–µ–º GET –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
@routes.get("/")
async def healthcheck(request):
    return web.Response(text="‚úÖ Bot is alive!")

app = web.Application()
app.add_routes(routes)

if __name__ == "__main__":
    print(f"üöÄ –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø—É—Ç—å: /{WEBHOOK_SECRET}")
    web.run_app(app, host="0.0.0.0", port=8080)
