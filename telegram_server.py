import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from main import connect  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WebSocket-—Ü–∏–∫–ª

import os

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
logging.basicConfig(level=logging.INFO)

running = False
last_run_time = 0

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    global running, last_run_time

    if str(message.chat.id) != CHAT_ID:
        await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    now = asyncio.get_event_loop().time()
    if running:
        await message.answer("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    if now - last_run_time < 180:  # 3 –º–∏–Ω—É—Ç—ã
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏.")
        return

    running = True
    last_run_time = now
    await message.answer("‚ñ∂Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ 2 –º–∏–Ω—É—Ç—ã...")

    try:
        await asyncio.wait_for(connect(), timeout=120)
    except asyncio.TimeoutError:
        await message.answer("‚èπÔ∏è –í—Ä–µ–º—è –≤—ã—à–ª–æ. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        running = False

if __name__ == "__main__":
    print("üü° –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start...")
    executor.start_polling(dp, skip_updates=True)
