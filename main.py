import asyncio
import json
import websockets
from trade_simulator import TradeSimulator
from telegram_notifier import send_telegram_message

simulator = TradeSimulator()

async def connect():
    uri = "wss://stream.bybit.com/v5/public/spot"
    pairs = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "AVAXUSDT", "XRPUSDT", "ADAUSDT"]
    topics = [f"publicTrade.{pair}" for pair in pairs]

    while True:
        try:
            print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...")
            async with websockets.connect(uri) as websocket:
                await websocket.send(json.dumps({
                    "op": "subscribe",
                    "args": topics
                }))
                print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

                while True:
                    response = await websocket.recv()
                    message = json.loads(response)

                    if message.get("type") == "snapshot":
                        continue

                    signal = simulator.process(message)

                    if signal:
                        print("üìà –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª, —Å–∏–º—É–ª–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É...")
                        report = simulator.simulate_trade(signal)

                        if report:
                            print("üì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...")
                            await send_telegram_message(report)
                        else:
                            print("üì≠ –°–¥–µ–ª–∫–∞ –±–µ–∑ –ø—Ä–∏–±—ã–ª–∏, Telegram –Ω–µ —É–≤–µ–¥–æ–º–ª—è–µ—Ç—Å—è.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
            print("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(5)

if __name__ == "__main__":
    print("üöÄ main.py –∑–∞–ø—É—â–µ–Ω")
    asyncio.run(connect())
