import asyncio
import json
import websockets
from trade_simulator import TradeSimulator
from telegram_notifier import send_telegram_message
from server import create_app  # –∏–∑–º–µ–Ω–∏–º run_server –Ω–∞ create_app
from aiohttp import web

simulator = TradeSimulator()

async def connect():
    print("üì° –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ WebSocket...")
    uri = "wss://stream.bybit.com/v5/public/spot"
    async with websockets.connect(uri) as websocket:
        await websocket.send(json.dumps({
            "op": "subscribe",
            "args": [
                "publicTrade.BTCUSDT",
                "publicTrade.ETHUSDT",
                "publicTrade.XRPUSDT",
                "publicTrade.SOLUSDT",
                "publicTrade.ADAUSDT",
                "publicTrade.AVAXUSDT"
            ]
        }))
        print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        while True:
            try:
                response = await websocket.recv()
                message = json.loads(response)

                if message.get("type") == "snapshot":
                    continue

                signal = simulator.process(message)
                if signal:
                    report = simulator.simulate_trade(signal)
                    if report:
                        await send_telegram_message(report)

            except Exception as e:
                print("üö® –û—à–∏–±–∫–∞ –≤ WebSocket loop:", e)
                await asyncio.sleep(5)

async def heartbeat():
    while True:
        await send_telegram_message("üíì –Ø –∂–∏–≤")
        await asyncio.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

async def main():
    print("üöÄ main.py –∑–∞–ø—É—â–µ–Ω")

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    tasks = [
        connect(),
        heartbeat()
    ]

    # –ó–∞–ø—É—Å–∫–∞–µ–º aiohttp-—Å–µ—Ä–≤–µ—Ä
    app = create_app()
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, port=8000)
    await site.start()

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
