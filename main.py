import asyncio
import json
import websockets
from trade_simulator import TradeSimulator
from telegram_notifier import send_telegram_message

simulator = TradeSimulator()

is_running = False  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω/–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

async def trading_cycle():
    global is_running
    is_running = True

    uri = "wss://stream.bybit.com/v5/public/spot"
    try:
        async with websockets.connect(uri) as websocket:
            await websocket.send(json.dumps({
                "op": "subscribe",
                "args": [
                    "publicTrade.BTCUSDT",
                    "publicTrade.ETHUSDT",
                    "publicTrade.XRPUSDT",
                    "publicTrade.SOLUSDT",
                    "publicTrade.ADAUSDT",
                    "publicTrade.AVAXUSDT"
                ]
            }))
            print("‚úÖ WebSocket –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            await send_telegram_message("‚úÖ WebSocket –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ 2 –º–∏–Ω—É—Ç—ã")

            start_time = asyncio.get_event_loop().time()
            while asyncio.get_event_loop().time() - start_time < 120:
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=10)
                    message = json.loads(response)
                    if message.get("type") == "snapshot":
                        continue

                    signal = simulator.process(message)
                    if signal:
                        report = simulator.simulate_trade(signal)
                        if report:
                            await send_telegram_message(report)
                except asyncio.TimeoutError:
                    print("‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                except Exception as e:
                    print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ:", e)
                    break
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket:", e)
    finally:
        is_running = False
        print("üõë –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ.")

if __name__ == "__main__":
    asyncio.run(trading_cycle())

